// Kea DHCPv4 config file. 

// See https://kea.readthedocs.io/
// Originally this file had a lot of comments which I since removed
//
{
    // DHCPv4 configuration starts here. This section will be read by DHCPv4 server
    // and will be ignored by other components.
    "Dhcp4": {
        // Add names of your network interfaces to listen on.
        "interfaces-config": {

            "interfaces": [ "*" ]
    
            // Kea DHCPv4 server by default listens using raw sockets. This ensures
            // all packets, including those sent by directly connected clients
            // that don't have IPv4 address yet, are received. However, if your
            // traffic is always relayed, it is often better to use regular
            // UDP sockets. If you want to do that, uncomment this line:
            // "dhcp-socket-type": "udp"
        },
    
        // Kea support control channel, which is a way to receive management
        // commands while the server is running. This is a Unix domain socket that
        // receives commands formatted in JSON, e.g. config-set (which sets new
        // configuration), config-reload (which tells Kea to reload its
        // configuration from file), statistic-get (to retrieve statistics) and many
        // more. For detailed description, see Sections 8.8, 16 and 15.
        "control-socket": {
            "socket-type": "unix",
            "socket-name": "/tmp/kea4-ctrl-socket"
        },
    
        // Use Memfile lease database backend to store leases in a CSV file.
        "lease-database": {
            // Memfile is the simplest and easiest backend to use. It's a in-memory
            // C++ database that stores its state in CSV file.
            "type": "memfile",
            "lfc-interval": 3600,
            "persist": true,
            "name": "/var/lib/kea/dhcp4.leases"
        },

        // Setup reclamation of the expired leases and leases affinity.
        // Expired leases will be reclaimed every 10 seconds. Every 25
        // seconds reclaimed leases, which have expired more than 3600
        // seconds ago, will be removed. The limits for leases reclamation
        // are 100 leases or 250 ms for a single cycle. A warning message
        // will be logged if there are still expired leases in the
        // database after 5 consecutive reclamation cycles.
        "expired-leases-processing": {
            "reclaim-timer-wait-time": 10,
            "flush-reclaimed-timer-wait-time": 25,
            "hold-reclaimed-time": 3600,
            "max-reclaim-leases": 100,
            "max-reclaim-time": 250,
            "unwarned-reclaim-cycles": 5
        },
    
        // Global timers specified here apply to all subnets, unless there are
        // subnet specific values defined in particular subnets.
        "renew-timer": 900,
        "rebind-timer": 1800,
        "valid-lifetime": 3600,

        // These are global options. They are going to be sent when a client
        // requests them, unless overwritten with values in more specific scopes.
        // The scope hierarchy is:
        // - global (most generic, can be overwritten by class, subnet or host)
        // - class (can be overwritten by subnet or host)
        // - subnet (can be overwritten by host)
        // - host (most specific, overwrites any other scopes)
        //
        // For a complete list of options currently supported by Kea, see
        // Section 7.2.8 "Standard DHCPv4 Options". Kea also supports
        // vendor options (see Section 7.2.10) and allows users to define their
        // own custom options (see Section 7.2.9).
        "option-data": [
            // When specifying options, you typically need to specify
            // one of (name or code) and data. The full option specification
            // covers name, code, space, csv-format and data.
            // space defaults to "dhcp4" which is usually correct, unless you
            // use encapsulate options. csv-format defaults to "true", so
            // this is also correct, unless you want to specify the whole
            // option value as long hex string. For example, to specify
            // domain-name-servers you could do this:
            // {
            //     "name": "domain-name-servers",
            //     "code": 6,
            //     "csv-format": "true",
            //     "space": "dhcp4",
            //     "data": "192.0.2.1, 192.0.2.2"
            // }
            // but it's a lot of writing, so it's easier to do this instead:
            {
                "name": "domain-name-servers",
                "data": "192.168.17.5, 192.168.17.6"
            },

            // Typically people prefer to refer to options by their names, so they
            // don't need to remember the code names. However, some people like
            // to use numerical values. For example, option "domain-name" uses
            // option code 15, so you can reference to it either by
            // "name": "domain-name" or "code": 15.
            {
                "name": "domain-name",
                "data": "rakhesh.local"
            },

            // Domain search is also a popular option. It tells the client to
            // attempt to resolve names within those specified domains. For
            // example, name "foo" would be attempted to be resolved as
            // foo.mydomain.example.com and if it fails, then as foo.example.com
            {
                "name": "domain-search",
                "data": "rakhesh.local"
            }
        ],

        // Below an example of a simple IPv4 subnet declaration. Uncomment to enable
        // it. This is a list, denoted with [ ], of structures, each denoted with
        // { }. Each structure describes a single subnet and may have several
        // parameters. One of those parameters is "pools" that is also a list of
        // structures.
        "subnet4": [
            {
                // This defines the whole subnet. Kea will use this information to
                // determine where the clients are connected. This is the whole
                // subnet in your network. This is mandatory parameter for each
                // subnet.
                "subnet": "192.168.17.0/24",

                // Pools define the actual part of your subnet that is governed
                // by Kea. Technically this is optional parameter, but it's
                // almost always needed for DHCP to do its job. If you omit it,
                // clients won't be able to get addresses, unless there are
                // host reservations defined for them.
                "pools": [ { "pool": "192.168.17.150 - 192.168.17.250" } ],

                // These are options that are subnet specific. In most cases,
                // you need to define at least routers option, as without this
                // option your clients will not be able to reach their default
                // gateway and will not have Internet connectivity.
                "option-data": [
                    {
                        // For each IPv4 subnet you most likely need to specify at
                        // least one router.
                        "name": "routers",
                        "data": "192.168.17.1"
                    }
                ],

                // Kea offers host reservations mechanism. Kea supports reservations
                // by several different types of identifiers: hw-address
                // (hardware/MAC address of the client), duid (DUID inserted by the
                // client), client-id (client identifier inserted by the client) and
                // circuit-id (circuit identifier inserted by the relay agent).
                //
                // Kea also support flexible identifier (flex-id), which lets you
                // specify an expression that is evaluated for each incoming packet.
                // Resulting value is then used for as an identifier.
                //
                // Note that reservations are subnet-specific in Kea. This is
                // different than ISC DHCP. Keep that in mind when migrating
                // your configurations.
                "reservations": [

                    // This is a reservation for a specific hardware/MAC address.
                    // It's a rather simple reservation: just an address and nothing
                    // else.
                    {
                        "hw-address": "1a:1b:1c:1d:1e:1f",
                        "ip-address": "192.0.2.201"
                    }

                    // See the docs for more ways of reserving

 
                    // You can add more reservations here.
                ]
                // You can add more subnets there.
            }
        ],

        "dhcp-ddns": {
            "server-ip": "127.0.0.1",
            "server-port": 53001,
            "enable-updates": true,
            "generated-prefix": "kea",
            "qualifying-suffix": "rakhesh.local",
            "override-client-update": true,
            "replace-client-name": "when-not-present"
            // format of generated name: [generated-prefix]-[address-text].[qualifying-suffix].
        },

        "loggers": [
            {
                // This section affects kea-dhcp4, which is the base logger for DHCPv4
                // component. It tells DHCPv4 server to write all log messages (on
                // severity INFO or more) to a file.
                "name": "kea-dhcp4",
                "output_options": [
                    {
                        // Specifies the output file. There are several special values
                        // supported:
                        // - stdout (prints on standard output)
                        // - stderr (prints on standard error)
                        // - syslog (logs to syslog)
                        // - syslog:name (logs to syslog using specified name)
                        // Any other value is considered a name of a time
                        "output": "stdout"
                        
                    }
                ],
                // This specifies the severity of log messages to keep. Supported values
                // are: FATAL, ERROR, WARN, INFO, DEBUG
                "severity": "INFO",

                // If DEBUG level is specified, this value is used. 0 is least verbose,
                // 99 is most verbose. Be cautious, Kea can generate lots and lots
                // of logs if told to do so.
                "debuglevel": 0
            }
        ]
    }
}