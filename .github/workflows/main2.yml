# This is the name of the workflow
name: Docker Build & Push [Debian]

# When it runs
on:
  workflow_dispatch:
    inputs:
      runs-on:
        description: "self-hosted | ubuntu-latest"
        required: false
        default: 'self-hosted'
# I am commenting this stuff out as I don't use it any more. I now pull in the info via a JSON file.
# I wanted to leave this behind however for future reference.
#    inputs:
#      imagename:
#        description: 'Name of image'
#        required: true
#        default: 'rakheshster/<FILLME>'
#      version:
#        description: 'Version'
#        required: true
#        default: 'v<xxx.yyy.zzz>'

# And what jobs it has
jobs:
  # Just one job here ... imaginatively called "buildx-debian" (that's its id at least, it doesn't have a name coz I couldn't think of something)
  buildx-debian:
    # this job runs on Ubuntu / Self-hosted (whatever is uncommented below)
    # runs-on: ubuntu-latest
    # runs-on: [self-hosted, linux]
    runs-on: ${{ github.event.inputs.runs-on }}
    # set timeout to 10 days
    timeout-minutes: 14400
    # these are its environment variables
    env: 
      # If I were using the workflow_dispatch inputs above, I can reference them as variables here
      # Variable format for workflow_dipatch https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/
      # IMAGENAME: ${{ github.event.inputs.imagename }}
      # VERSION: ${{ github.event.inputs.version }}
      PLATFORMS: "linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6"

    # the steps of my job
    steps:
        # Checkout the code from GitHib
      - name: Checkout the code
        uses: actions/checkout@v2

        # Read my JSON file via a simple cat, then output it as the output of this step (which I can then refer to via its id "read_buildinfo") 
      - id: read_buildinfo
        run: |
          content=`cat ./buildinfo.json`
          # the following lines are required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"
      
        # Set up QEMU (https://github.com/docker/setup-qemu-action)
        # (this allows buildx to build for other platforms)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # this is how things used to be prior to this action being officially incorporated into Docker
      # - name: Set up Docker Buildx
      #   uses: crazy-max/ghaction-docker-buildx@v3
      #   with:
      #     buildx-version: latest
      #     qemu-version: latest

      - name: Restore or Create a cache
        uses: actions/cache@v2
        id: cache
        with:
          # Where to store the cache
          path: /build-cache
          # The key created when saving a cache and the key used to search for a cache.
          # I was doing the following initially but have changed it to not depend on the SHA any more as I'd keep the cache common for this workflow
          # key: ${{ runner.os }}-buildx-${{ github.sha }}
          key: $ {{ github.workflow }}
          # An ordered list of alternative keys to use for finding the cache if no cache hit occurred for key.
          # Not using this anymore either as the key is constant now
          # restore-keys: |
          #   ${{ runner.os }}-buildx-
          # When key matches an existing cache, it's called a cache hit, and the action restores the cached files to the path directory.
          # When key doesn't match an existing cache, it's called a cache miss, and a new cache is created if the job completes successfully. 
          # When a cache miss occurs, the action searches for alternate keys called restore-keys.
  
      # commenting this as out as I now build and push using an action
      # - name: Docker Buildx (build)
      #   run: |
      #     IMAGENAME="${{ fromJson(steps.read_buildinfo.outputs.packageJson).imagename }}"
      #     VERSION="${{ fromJson(steps.read_buildinfo.outputs.packageJson).version  }}"

      #     docker buildx build \
      #       --platform $PLATFORMS \
      #       --output "type=image,push=false" \
      #       --tag ${IMAGENAME}:${VERSION}-debian \
      #       --tag ${IMAGENAME}:latest-debian \
      #       --file ${GITHUB_WORKSPACE}/Dockerfile.debian \
      #       --cache-from "type=local,src=/build-cache" \
      #       --cache-to "type=local,dest=/build-cache" ./

      - name: Login to Docker Hub
        if: success() && github.event_name != 'pull_request'
        # uses: crazy-max/ghaction-docker-login@v1 (not used any more as the action name has changed to the below)
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} 

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push
        uses: docker/build-push-action@v2
        env:
          # read these variables from the JSON file I inputted in an earlier step and define for use in this step
          IMAGENAME: ${{ fromJson(steps.read_buildinfo.outputs.packageJson).imagename }}
          VERSION: ${{ fromJson(steps.read_buildinfo.outputs.packageJson).version  }}
        with:
          context: .
          file: ./Dockerfile-debian
          platforms: ${{ env.PLATFORMS }}
          push: true
          cache-from: type=local,src=/build-cache
          cache-to: type=local,dest=/build-cache
          tags: |
            ${{ env.IMAGENAME }}:${{ env.VERSION }}-debian
            ${{ env.IMAGENAME }}:latest-debian
            ghcr.io/${{ env.IMAGENAME }}:${{ env.VERSION }}-debian
            ghcr.io/${{ env.IMAGENAME }}:latest-debian

      # commenting this as out as I now build and push using an action.
      # - name: Docker Buildx (push)
      #   if: success() && github.event_name != 'pull_request'
      #   run: |
      #     IMAGENAME="${{ fromJson(steps.read_buildinfo.outputs.packageJson).imagename }}"
      #     VERSION="${{ fromJson(steps.read_buildinfo.outputs.packageJson).version  }}"

      #     docker buildx build \
      #     --platform $PLATFORMS \
      #     --output "type=image,push=true" \
      #     --tag ${IMAGENAME}:${VERSION}-debian \
      #     --tag ${IMAGENAME}:latest-debian \
      #     --file ${GITHUB_WORKSPACE}/Dockerfile.debian \
      #     --cache-from "type=local,src=/build-cache" ./

      # - name: Inspect image
      #   if: always() && github.event_name != 'pull_request'
      #   run: |
      #     IMAGENAME="${{ fromJson(steps.read_buildinfo.outputs.packageJson).imagename }}"
      #     VERSION="${{ fromJson(steps.read_buildinfo.outputs.packageJson).version  }}"

      #     docker buildx imagetools inspect ${IMAGENAME}:${VERSION}-debian
